{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Simplified Modern Recipe for PID Control \u00b6 Abstract The PID law is still largely misunderstood. The PID is the simplest representation of the complex prediction or optimization actions in the world. In this library, we provide a simple but practically robust realization of the PID law. For a more technical understanding of the automatic tuning design visit ( https://arxiv.org/pdf/2006.00314 ). PID Law \u00b6 The PID Law is a function: u = f(r,y)} u = f(r,y)} $$ u=f(r,y)=\\lambda_p\\,u_p + \\lambda_i\\,u_i + \\lambda_d\\,u_d $$ Controller Usecase \u00b6 C++ if ( t >= ( ( PIDobj_II . T_prev + PIDobj_II . Ts ) - ( 0.5 * PIDobj_II . Ts ) )) { // tprev[1] = t; done inside the PID /* CPLM Evolution */ cplm_kernel ( PIDobj_II . ym , PIDobj_II . xm , PIDobj_II . r , PIDobj_II . Ts , 0 , 0 , wn [ 1 ]); // Serial.print(\"ym: \"); Serial.println(PIDobj_II.ym); /* CPLMFC Tuning Computation */ tuneKp ( PIDobj_II , t , L [ 1 ], ts , alpha [ 1 ], 2 ); //Serial.print(\"Kp: \");Serial.println(PIDobj_II.Kp); tuneKi ( PIDobj_II , wn [ 1 ]); //Serial.print(\" Ki: \");Serial.print(PIDobj_II.Ki); tuneKd ( PIDobj_II , wn [ 1 ]); //Serial.print(\" Kd: \");Serial.println(PIDobj_II.Kd); /* PID Control State Evolution: Architecture */ sfunPID_kernel ( PIDobj_II , t ); //Serial.print(\"upwm_II: \"); Serial.println(PIDobj_II.u); }","title":"Home"},{"location":"#simplified-modern-recipe-for-pid-control","text":"Abstract The PID law is still largely misunderstood. The PID is the simplest representation of the complex prediction or optimization actions in the world. In this library, we provide a simple but practically robust realization of the PID law. For a more technical understanding of the automatic tuning design visit ( https://arxiv.org/pdf/2006.00314 ).","title":"Simplified Modern Recipe for PID Control"},{"location":"#pid-law","text":"The PID Law is a function: u = f(r,y)} u = f(r,y)} $$ u=f(r,y)=\\lambda_p\\,u_p + \\lambda_i\\,u_i + \\lambda_d\\,u_d $$","title":"PID Law"},{"location":"#controller-usecase","text":"C++ if ( t >= ( ( PIDobj_II . T_prev + PIDobj_II . Ts ) - ( 0.5 * PIDobj_II . Ts ) )) { // tprev[1] = t; done inside the PID /* CPLM Evolution */ cplm_kernel ( PIDobj_II . ym , PIDobj_II . xm , PIDobj_II . r , PIDobj_II . Ts , 0 , 0 , wn [ 1 ]); // Serial.print(\"ym: \"); Serial.println(PIDobj_II.ym); /* CPLMFC Tuning Computation */ tuneKp ( PIDobj_II , t , L [ 1 ], ts , alpha [ 1 ], 2 ); //Serial.print(\"Kp: \");Serial.println(PIDobj_II.Kp); tuneKi ( PIDobj_II , wn [ 1 ]); //Serial.print(\" Ki: \");Serial.print(PIDobj_II.Ki); tuneKd ( PIDobj_II , wn [ 1 ]); //Serial.print(\" Kd: \");Serial.println(PIDobj_II.Kd); /* PID Control State Evolution: Architecture */ sfunPID_kernel ( PIDobj_II , t ); //Serial.print(\"upwm_II: \"); Serial.println(PIDobj_II.u); }","title":"Controller Usecase"},{"location":"about/","text":"About \u00b6 This realization of the PID control algorithm has all the practical problems of PID control implementation, internally addressed in the PID algorithm itself. It features: Simplified Bilinear Discretization for Integration and Differentiation Individual Critic Contributions Control Two Degree-of-Freedom Control Closed PID-Loop Model Following Control Automatic Anti-windup Control What is Tuning \u00b6 Closed PID-Loop Model Following Control is the method used to tune the PID is detailed in this paper CPLMFC . For more details on the theory, see Closed PID-Loop Model Following Control Preprint . What is a PID? \u00b6","title":"About"},{"location":"about/#about","text":"This realization of the PID control algorithm has all the practical problems of PID control implementation, internally addressed in the PID algorithm itself. It features: Simplified Bilinear Discretization for Integration and Differentiation Individual Critic Contributions Control Two Degree-of-Freedom Control Closed PID-Loop Model Following Control Automatic Anti-windup Control","title":"About"},{"location":"about/#what-is-tuning","text":"Closed PID-Loop Model Following Control is the method used to tune the PID is detailed in this paper CPLMFC . For more details on the theory, see Closed PID-Loop Model Following Control Preprint .","title":"What is Tuning"},{"location":"about/#what-is-a-pid","text":"","title":"What is a PID?"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2020-20xx Oluwasegun Somefun Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2020-20xx Oluwasegun Somefun Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}